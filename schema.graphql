type Address @entity {
  id: ID! ## public address
  balances: [Balance!]! @derivedFrom(field: "address")
  transfers: [AddressTransfer!] @derivedFrom(field: "address")
}

type Transfer @entity {
  id: ID! ## event logIndex
  txHash: String!
  from: Bytes! # address
  to: Bytes! # address
  timestamp: BigInt!
  token: Token!
  amount: BigDecimal!
  amountWeight: BigDecimal!
  amountUsd: BigDecimal!
  addresses: [AddressTransfer!]! @derivedFrom(field: "transfer")
}

type AddressTransfer @entity {
  id: ID! ## address.id + transfer.id
  address: Address!
  transfer: Transfer!
  countId: BigInt!
}

type Balance @entity {
  id: ID! ## the token address + - + owner address
  token: Token!
  address: Address! ## owner address
  amount: BigDecimal!
  amountWeight: BigDecimal! ## measured in ounce
  amountUsd: BigDecimal!
}

type Token @entity {
  id: ID! ## token contract address
  name: String!
  ticker: String!
  decimals: BigInt!
  weight: BigDecimal!

  totalSupply: BigDecimal!
  derivedETH: BigDecimal!
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type Stats @entity {
  id: ID! ## 1
  transferCount: BigInt!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}